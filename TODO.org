#+TITLE: Loris TODO-list

* Основные идеи
  Loris - веб-фреймворк, основным приоритетом которого является
  простота. Основное применение - хостинг single-page application, REST и
  websocket серверов. Приоритет сделан на удобное расширение REST и WS
  api, каждое дополнение к которым оформляется в виде отдельного модуля
  протокола, который можно будет использовать повторно. Модули протокола
  оформляются реализацией соответствующего behaviour и облегчаются
  использованием модулей для работы с БД, авторизацией и тд. Сервер "из коробки"
  поддерживает безмастерную кластеризацию для увеличения отказоустойчивости и
  горизонтального масштабирования. Основные пункты:
  1. *Простота разработки* достигается договорённостями и созданием возможно
     большего количества заготовок функционала, который можно будет
     использовать, указывая необходимый функционал и его свойства на уровне
     конфигурации. Весь повторяемый код описывается авторами фреймворка и
     прячется от пользователя, оставляя ему лишь реализовать нужный behaviour в
     своём модуле, либо же выбрать желаемое поведение в конфигурации. Также
     необходимо обеспечить достаточный уровень документации и примеров.
  2. *Простота деплоя* достигается рядом решений в двух задач деплоя -
     подготовки рабочего окружения и объединения нод в кластер. Подготовка
     рабочего окружения упрощена за счёт поставки Loris как релиза, что
     позволяет отказаться от внешних зависимостей и избежать конфликтов
     версий. Оформление сервера как сервиса, создание групп и пользователей с
     разграничением прав - всё это планируется сделать в будущем на этапе
     установки пакета. Для задач конфигурирования кластера предлагается
     перенять решения riak-admin.
  3. *Простота сопровождения* включает в себя задачи обеспечения удобства в
     следующих пунктах:
     - сбор информации о работающей системе (логи, метрики, realtime мониторинг)
     - инструменты для бэкапа\восстановления
     - инструменты для администрирования БД
* Добавление функционала
** Cli
** Регистрация новых пользователей
** Администрирование учётных записей
** Резервирование (research)
   Исследовать возможность использования механизмов failover\takeover для
   реализации резервирования.
* Рефакторинг
** Согласовать WS с новой структурой REST
** Согласовать file_upload с новой структурой REST и авторизацией
* Тестирование
** Покрыть db-app тестами
** Покрыть server-app тестами
** Покрыть cli тестами
* Деплой и администрирование
** оформить как .deb пакет
** система мониторинга, метрики
** SNMP
** Бэкапы и восстановление
* Документация
